package edu.monmouth.se.oopap.sourceanalyzer;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;

import edu.monmouth.se.oopap.analyzer.LineAnalyzer;
import edu.monmouth.se.oopap.enumerator.LineType;

/**
 * @author Himali Patel
 * @version %I% %G%
 */
public class PSPPhysicalLOCSourceAnalyzer extends SourceAnalyzer
{
  /**
   * Integer to hold the number of lines within the program.
   */
  private int programLines;

  /**
   * Map to store the class to operation association. The key is the class name
   * the value is a map which contains the operation names as the key and the
   * line counts as the value.
   */
  private Map<String, Map<String, Integer>> classOperationLinesMap;

  /**
   * Map to store the class to line count association. The key is the class name
   * the value is the number of lines in that class.
   */
  private Map<String, Integer> classLinesMap;

  /**
   * Default constructor for the line count analyzer.
   */
  public PSPPhysicalLOCSourceAnalyzer()
  {
    // use the reset analysis method to initialize the data members of the class
    this.resetAnalysis();

  }

  /**
   * Method used to reset the analysis of the analyzer. Resets the data members
   * of the class.
   */
  private void resetAnalysis()
  {

    this.programLines = 0;
    this.classOperationLinesMap = new HashMap<String, Map<String, Integer>>();
    this.classLinesMap = new HashMap<String, Integer>();

  }

  /**
   * Method responsible to analyzing the source code. After the report is run
   * the report methods must be used to obtain the results of the report.
   * 
   * @param theSourceMap
   *          The classname to class contents assocation map. The key is the
   *          class name. The value is a List of Strings representing the
   *          contents of the class.
   */
  public void analyzeSource(Map<String, List<String>> theSourceMap)
  {
    // reset the previous analysis
    this.resetAnalysis();

    // integer to hold the current physical LOC for the current class
    int currClassLines = 0;
    // Set to hold the list of key values (source file names) for the current
    // map of source files.
    Set<String> sourceKeySet = theSourceMap.keySet();

    // Iterate through the entire list of files in the program
    // The algorithm for counting is as follows. For every line in the file
    // both the class and program count are incremented. Every time a new
    // class is analyzed the class line counter is reset. When a operation
    // declaration is encountered the operation count begins. As the counter
    // iterates through the operation, it pushes a opening braces onto the
    // brace stack and pops when a closing brace is encountered. When the
    // stack is empty again, we know we've reached the end of the method and
    // the count can stop.
    for (String currSourceFileName : sourceKeySet)
    {

      // get the contents of the current file
      List<String> currFileContents = theSourceMap.get(currSourceFileName);

      // String to hold the current line of the file
      String currLine = "";
      // String to hold the name of the current method being analyzed
      String currOperationName = "";
      // integer to hold the current physical LOC for the current operation
      int currOperationLines = 0;
      // LineType for the current line
      LineType currLineType = LineType.Unknown;
      // Reset the ClassLOC
      currClassLines = 0;
      // Map to hold the operation to line count association
      Map<String, Integer> operationCountMap = new HashMap<String, Integer>();

      // integer to hold the blank lines in current files
      int currBlankLines = 0;

      // integer to hold the comment lines in current files
      int currCommentLines = 0;

      // integer to hold the open comment lines in current files
      int currOpenComment = 0;

      // integer to hold the close comment lines in current files
      int currCloseComment = 0;

      int numLine = 0;
      // Stack to store openComment
      Stack<LineType> commentStack = new Stack<LineType>();

      // Boolean to indicate if there is comment or not.
      boolean incomment = false;

      // iterate over the entire content of the file, analyzing each line
      // and incrementing the proper counter when appropriate.
      for (int i = 0; i < currFileContents.size(); i++)
      {

        // get the current line
        currLine = currFileContents.get(i);

        // determine the current line type
        currLineType = LineAnalyzer.getLineType(currLine);

        // Check the current line type. With this analysis we are concerned with
        // class declarations so the name may be retrieved, method declarations
        // for the purpose of resetting the LOC count by operation and getting
        // the name
        switch (currLineType)
        {

        case MethodDeclaration:

          // get the name of the method being declared
          currOperationName = LineAnalyzer.getOperationName(currLine);

          // reset the LOC for the operation
          currOperationLines = 1;

          break;

        case Blank:
          currBlankLines++;
          break;
        case Comment:
          currCommentLines++;

          break;
        case OpenComment:
          incomment = true;
          break;
        case CloseComment:
          incomment = false;
          numLine++;
          break;
        }
        
        if (incomment == true)
        {
          
          numLine++;
          
        }

        this.programLines++;
        currClassLines++;
        currOperationLines++;

        // currBlankLines++;

      }

      // add the map of operation to line count association to the class to
      // line count association map
      classOperationLinesMap.put(currSourceFileName, operationCountMap);
      classLinesMap.put(currSourceFileName, currClassLines);

    }

  }

  /**
   * Method responsible for generating a report ready to be output to the
   * console.
   * 
   * @return a List of String containing the console output.
   */
  public List<String> generateConsoleReport()
  {

    List<String> consoleReport = new ArrayList<String>();

    // Set of strings to hold all of the keys (class names) in the map so that
    // it may be iterated through.
    Set<String> classKeySet = this.classOperationLinesMap.keySet();

    consoleReport.add("PSP Physical LOC Report");

    // Iterate over the entire class to operation association map.
    for (String currClassKey : classKeySet)
    {

      // Map to hold the list of operations for the current class
      Map<String, Integer> operationLinesMap = this.classOperationLinesMap
          .get(currClassKey);
      // Set of strings to hold all of the keys (operation names) in the map
      // so that it may be iterated through.
      Set<String> operationKeySet = operationLinesMap.keySet();

      // add the class name to the output
      consoleReport.add("  " + currClassKey);

      // Iterate of the entire set of operations.
      for (String currOperationName : operationKeySet)
      {

        // Add the operation name followed by the number of lines in that
        // operation. Get the line count from the operations lines map.
        consoleReport.add("    " + currOperationName + ": "
            + operationLinesMap.get(currOperationName));
      }

      // Add the class total to the output
      consoleReport.add("Class Total: " + classLinesMap.get(currClassKey)
          + "\n");

    }

    // Add the program total to the output
    consoleReport.add("Program Total: " + programLines);

    return consoleReport;

  }

  /**
   * 
   * @return
   */
  public List<List<String>> generateWorksheetReport()
  {

    List<List<String>> worksheetReport = new ArrayList<List<String>>();

    return worksheetReport;

  }

}
