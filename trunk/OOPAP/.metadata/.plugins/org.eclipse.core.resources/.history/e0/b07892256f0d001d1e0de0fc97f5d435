package edu.monmouth.se.oopap;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JTextField;
import javax.swing.JLabel;

/**
 * Primary Graphical User Interface for the OOPAP application.
 * 
 * @author Andrew Tasso
 * @version %I% %G%
 */
public class OOPAPGUI extends JFrame
{

  private JTextField textField;
  private JTextField studentNameTextField;
  private JTextField projectNameTextField;
  private OOPAPController controller;
  private JFileChooser fileChooser;
  private String workingPath;
  private static final String sourceExtension = ".java";
  
  /**
   * 
   */
  private OOPAPConsole console;
  
  /**
   * Create the frame
   */
  public OOPAPGUI(OOPAPController theController)
  {
    super();

    this.controller = theController;
    this.fileChooser = new JFileChooser();
    this.fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
    this.workingPath = System.getProperty("user.dir");
    this.console = new OOPAPConsole();
    this.studentNameTextField = new JTextField();
    this.projectNameTextField = new JTextField();
    
    JLabel studentNameLabel = new JLabel("Student Name:");
    JLabel projectNameLabel = new JLabel("Project Name:");

    getContentPane().setLayout(null);
    setBounds(100, 100, 425, 160);
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    super.setTitle("OOPAP");

    final JMenuBar menuBar = new JMenuBar();
    setJMenuBar(menuBar);

    final JMenuItem newItemMenuItem = new JMenuItem();
    newItemMenuItem.setText("File");
    menuBar.add(newItemMenuItem);

    studentNameLabel.setBounds(10, 30, 30, 60);
    getContentPane().add(studentNameLabel);
    studentNameLabel.setBounds(10, 40, 30, 20);
    getContentPane().add(projectNameLabel);
    
    textField = new JTextField();
    textField.setBounds(10, 10, 359, 26);
    getContentPane().add(textField);
    this.textField.setText(workingPath);

    final JButton chooseFileButton = new JButton();
    chooseFileButton.addActionListener(new ActionListener()
    {

      public void actionPerformed(final ActionEvent e)
      {

        selectFile();

      }

    });

    chooseFileButton.setText("...");
    chooseFileButton.setBounds(375, 10, 34, 26);
    getContentPane().add(chooseFileButton);

    final JButton runAnalysisButton = new JButton();
    runAnalysisButton.addActionListener(new ActionListener()
    {

      public void actionPerformed(final ActionEvent arg0)
      {

        try
        {

          workingPath = textField.getText();
          controller.runAnalysis(workingPath, sourceExtension);
          
          console.setVisible(true);
          List<String> fullConsoleReport = controller.getFullConsoleReport();
          console.displayConsoleReport(fullConsoleReport);
          
          

        } catch (Exception e)
        {

          e.printStackTrace();

        }

      }

    });
    runAnalysisButton.setText("Run Analysis");
    runAnalysisButton.setBounds(298, 50, 120, 26);
    getContentPane().add(runAnalysisButton);
    //

    this.setVisible(true);
  }

  protected void selectFile()
  {

    fileChooser.setCurrentDirectory(new File(this.workingPath));
    int returnVal = fileChooser.showOpenDialog(this);

    if (returnVal == JFileChooser.APPROVE_OPTION)
    {

      File file = fileChooser.getSelectedFile();
      workingPath = file.toString();
      textField.setText(workingPath);

    }

  }
}
